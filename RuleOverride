/**
 * Clash-Verge-Rev 全局扩展脚本（优化版 v2.6）
 * 
 * 核心优化：
 * 1. HK-BEUP® ISP 包含所有自动选择组
 * 2. 服务组统一使用"手动选择"（全量节点）
 * 3. 服务组顺序：主选择器 → 手动选择 → 自动选择 → 全量节点
 * 4. 自动选择组隐藏（hidden: true）
 * 5. Emby 规则（6 个自动选择组，含专线自动选择）
 */

// ===================================================================================
// 1. 自定义规则和过滤节点
// ===================================================================================
const EXCLUDED_KEYWORDS = [
  '官网', '到期', '流量', '剩余', '时间', '重置', '订阅', '卡顿',
  '距离下次重置剩余', '套餐到期', '导航'
];

// Emby 专线节点（仅用于 e.beupisp.com）
const EMBY_EXCLUSIVE_KEYWORDS = [
  '🎬 Emby 01 x 0.2',
  '🎬 Emby 02 x 0.2',
  '🎬 Emby 03 x 0.2',
  '🎬 Emby 04 x 0.2'
];

const CustomizationRule = [
  "DOMAIN-SUFFIX,jetbrains.ai,HK-BEUP® ISP",
  "PROCESS-NAME,tailscaled,DIRECT",
  "PROCESS-NAME,tailscaled.exe,DIRECT",
  "DOMAIN-SUFFIX,mcdn.bilivideo.com,REJECT",
  "DOMAIN-SUFFIX,mcdn.bilivideo.cn,REJECT",
  "DOMAIN-SUFFIX,szbdyd.com,REJECT",
  "DOMAIN-SUFFIX,e.beupisp.com,Emby",
];

// ===================================================================================
// 2. 自定义链接代理落地节点
// ===================================================================================
const chainTransitName = "链式中转";
const chainLandingProxies = [];

// ===================================================================================
// 3. 服务模块化配置区
// ===================================================================================
const ENABLED_SERVICES = {
  openai: {
    enabled: true,
    allowDirect: false,
    groupName: "ChatGPT",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/chatgpt.svg",
    regions: ["US"],
    rule: {
      providerKey: "openai",
      url: "https://fastly.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OpenAI/OpenAI.yaml"
    }
  },
  anthropic: {
    enabled: true,
    allowDirect: false,
    groupName: "Claude",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/claude.svg",
    regions: ["US"],
    rule: {
      providerKey: "anthropic",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Anthropic/Anthropic.yaml"
    }
  },
  telegram: {
    enabled: true,
    allowDirect: false,
    groupName: "Telegram",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/telegram.svg",
    regions: ["SG"],
    rule: {
      providerKey: "telegram",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.yaml",
      options: "no-resolve"
    }
  },
  github: {
    enabled: true,
    allowDirect: false,
    groupName: "Github",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/github.svg",
    regions: ["HK"],
    rule: {
      providerKey: "github",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitHub/GitHub.yaml"
    }
  },
  google: {
    enabled: true,
    allowDirect: false,
    groupName: "Google",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/google.svg",
    regions: ["US"],
    rule: {
      providerKey: "google",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.yaml"
    }
  },
  microsoft: {
    enabled: true,
    allowDirect: true,
    groupName: "MicroSoft",
    icon: "https://clashverge.dev/assets/icons/microsoft.svg",
    regions: [],
    rule: {
      providerKey: "microsoft",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.yaml"
    }
  },
  apple: {
    enabled: true,
    allowDirect: true,
    groupName: "Apple",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/apple.svg",
    regions: [],
    rule: {
      providerKey: "apple",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml"
    }
  },
  netflix: {
    enabled: true,
    allowDirect: false,
    groupName: "Netflix",
    icon: "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/netflix.svg",
    regions: ["HK"],
    rule: {
      providerKey: "netflix",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Netflix/Netflix_Classical.yaml"
    }
  },
  emby: {
    enabled: true,
    allowDirect: false,
    groupName: "Emby",
    icon: "https://www.svgrepo.com/show/306002/emby.svg",
    regions: ["HK", "JP", "TW", "US", "SG"],
    isEmby: true,
    rule: {
      providerKey: "emby",
      url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Emby/Emby.yaml"
    }
  }
};

// ===================================================================================
// 4. 区域枚举
// ===================================================================================
const REGIONS = {
  HK: { name: "香港", regex: /香港|HK|Hong|🇭🇰/, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Hong_Kong.png" },
  MO: { name: "澳门", regex: /澳门|澳門|MO|Macau|Macao|🇲🇴/, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Macao.png" },
  TW: { name: "台湾", regex: /台湾|TW|Taiwan|Wan|🇨🇳|🇹🇼/, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Taiwan.png" },
  SG: { name: "新加坡", regex: /新加坡|狮城|SG|Singapore|🇸🇬/, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Singapore.png" },
  JP: { name: "日本", regex: /日本|JP|Japan|🇯🇵/, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Japan.png" },
  US: { name: "美国", regex: /美国|US|United States|America|🇺🇸/, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/United_States.png" },
};

// ===================================================================================
// 5. 底层配置
// ===================================================================================
const chainLandingName = "链式落地";
const groupBaseOption = {
  interval: 0,
  timeout: 3000,
  url: "http://www.gstatic.com/generate_204",
  lazy: true,
  "max-failed-times": 3,
  hidden: false
};

const ruleProviderCommon = {
  type: "http",
  format: "yaml",
  interval: 86400
};

// 静态 providers（Loyalsoldier 基础集）
const staticRuleProviders = {
  reject: { ...ruleProviderCommon, behavior: "domain", url: "https://fastly.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt", path: "./ruleset/loyalsoldier/reject.yaml" },
  proxy: { ...ruleProviderCommon, behavior: "domain", url: "https://fastly.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt", path: "./ruleset/loyalsoldier/proxy.yaml" },
  direct: { ...ruleProviderCommon, behavior: "domain", url: "https://fastly.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt", path: "./ruleset/loyalsoldier/direct.yaml" },
  cncidr: { ...ruleProviderCommon, behavior: "ipcidr", url: "https://fastly.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/cncidr.txt", path: "./ruleset/loyalsoldier/cncidr.yaml" },
  lancidr: { ...ruleProviderCommon, behavior: "ipcidr", url: "https://fastly.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/lancidr.txt", path: "./ruleset/loyalsoldier/lancidr.yaml" },
  applications: { ...ruleProviderCommon, behavior: "classical", url: "https://fastly.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt", path: "./ruleset/loyalsoldier/applications.yaml" },
  private: { ...ruleProviderCommon, behavior: "domain", url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.yaml", path: "./ruleset/MetaCubeX/private.yaml" },
  gfw: { ...ruleProviderCommon, behavior: "domain", url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.yaml", path: "./ruleset/MetaCubeX/gfw.yaml" },
};

// Loyalsoldier 扩展 providers
const lsExtraProviders = {
  icloud: { ...ruleProviderCommon, behavior: "domain", url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/icloud.txt", path: "./ruleset/loyalsoldier/icloud.yaml" },
  applecn: { ...ruleProviderCommon, behavior: "domain", url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/apple.txt", path: "./ruleset/loyalsoldier/apple.yaml" },
  googled: { ...ruleProviderCommon, behavior: "domain", url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/google.txt", path: "./ruleset/loyalsoldier/google.yaml" },
  tld_not_cn: { ...ruleProviderCommon, behavior: "domain", url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/tld-not-cn.txt", path: "./ruleset/loyalsoldier/tld-not-cn.yaml" },
  telegramcidr: { ...ruleProviderCommon, behavior: "ipcidr", url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/telegramcidr.txt", path: "./ruleset/loyalsoldier/telegramcidr.yaml" }
};

// blackmatrix7 常用服务
const bmRuleProviders = {
  youtube: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.yaml" },
  twitter: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.yaml" },
  tiktok: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/TikTok/TikTok.yaml" },
  discord: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Discord/Discord.yaml" },
  wikipedia: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Wikipedia/Wikipedia.yaml" },
  gitlab: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GitLab/GitLab.yaml" },
  cloudflare: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Cloudflare/Cloudflare.yaml" },
  paypal: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/PayPal/PayPal.yaml" },
  reddit: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Reddit/Reddit.yaml" },
  spotify: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Spotify/Spotify.yaml" },
  steam: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Steam/Steam.yaml" },
  epic: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Epic/Epic.yaml" },
  onedrive: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OneDrive/OneDrive.yaml" },
  dropbox: { ...ruleProviderCommon, behavior: "classical", url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Dropbox/Dropbox.yaml" }
};

// 静态规则
const staticRules = {
  top: [
    ...CustomizationRule,
    "RULE-SET,applications,DIRECT",
    "RULE-SET,private,DIRECT",
    "RULE-SET,reject,广告过滤"
  ],
  bottom: [
    "RULE-SET,proxy,HK-BEUP® ISP",
    "RULE-SET,gfw,HK-BEUP® ISP",
    "RULE-SET,direct,DIRECT,no-resolve",
    "RULE-SET,lancidr,DIRECT,no-resolve",
    "RULE-SET,cncidr,DIRECT,no-resolve",
    "GEOIP,LAN,DIRECT,no-resolve",
    "GEOIP,CN,DIRECT,no-resolve",
    "MATCH,漏网之鱼"
  ]
};

// ===================================================================================
// DNS 配置
// ===================================================================================
const domesticNameservers = ["223.5.5.5", "119.29.29.29", "114.114.114.114"];
const foreignNameservers = ["1.1.1.1", "8.8.8.8", "8.8.4.4", "208.67.222.222", "9.9.9.9"];

const dnsConfig = {
  enable: true,
  listen: "127.0.0.1:1053",
  secret: "K!c*ow9!@BgS!6Kw9r",
  ipv6: false,
  "prefer-h3": true,
  "use-system-hosts": false,
  "cache-algorithm": "arc",
  "enhanced-mode": "fake-ip",
  "fake-ip-range": "198.18.0.1/16",
  "fake-ip-filter": [
    "+.lan",
    "+.local",
    "+.msftconnecttest.com",
    "+.msftncsi.com",
    "localhost.ptlogin2.qq.com",
    "localhost.sec.qq.com",
    "localhost.work.weixin.qq.com"
  ],
  "default-nameserver": [...domesticNameservers],
  nameserver: [...domesticNameservers],
  "proxy-server-nameserver": [...domesticNameservers],
  "respect-rules": true,
  "nameserver-policy": {
    "geosite:cn,private": ["https://doh.pub/dns-query", "https://dns.alidns.com/dns-query"],
    "geosite:apple": ["https://doh.pub/dns-query"],
    "geosite:geolocation-!cn": ["https://dns.cloudflare.com/dns-query", "https://dns.google/dns-query"],
    "geosite:category-ads-all": "rcode://success"
  }
};

// ===================================================================================
// 工具函数
// ===================================================================================
function buildRegionNodeCache(allProxyNames) {
  const cache = {};
  Object.keys(REGIONS).forEach(key => {
    cache[key] = allProxyNames.filter(name => REGIONS[key].regex.test(name));
  });
  return cache;
}

function getNodeNames(allProxyNames, regionKeys = []) {
  if (!regionKeys || regionKeys.length === 0) return allProxyNames;
  const matchedProxies = new Set();
  for (const key of regionKeys) {
    const region = REGIONS[key];
    if (region && region.regex) {
      allProxyNames.forEach(proxyName => {
        if (region.regex.test(proxyName)) matchedProxies.add(proxyName);
      });
    }
  }
  return Array.from(matchedProxies);
}

// ===================================================================================
// 主程序入口
// ===================================================================================
function main(config) {
  if ((config?.proxies?.length ?? 0) === 0 &&
      (typeof config?.["proxy-providers"] === "object" ? Object.keys(config["proxy-providers"]).length : 0) === 0) {
    throw new Error("配置文件中未找到任何代理");
  }

  const initialProxies = [...(config.proxies || []), ...chainLandingProxies];
  config.proxies = initialProxies.filter(p =>
    !EXCLUDED_KEYWORDS.some(keyword => (p?.name || "").includes(keyword))
  );

  const allProxyNames = config.proxies.map(p => p.name);
  const chainProxiesName = chainLandingProxies.map(p => p.name);

  // 分离 Emby 专线节点和通用节点
  const embyExclusiveNodes = allProxyNames.filter(name =>
    EMBY_EXCLUSIVE_KEYWORDS.some(keyword => name === keyword)
  );
  const generalProxyNames = allProxyNames.filter(name =>
    !EMBY_EXCLUSIVE_KEYWORDS.some(keyword => name === keyword)
  );

  const regionNodeCache = buildRegionNodeCache(generalProxyNames);

  // 地区代理组（使用通用节点）
  const manualRegionGroups = [];
  const autoRegionGroups = [];

  Object.keys(REGIONS).forEach(key => {
    const nodesInRegion = getNodeNames(generalProxyNames, [key]);
    if (nodesInRegion.length > 0) {
      manualRegionGroups.push({
        ...groupBaseOption,
        name: `${key}-手动选择`,
        type: 'select',
        proxies: nodesInRegion,
        icon: REGIONS[key].icon
      });

      autoRegionGroups.push({
        ...groupBaseOption,
        name: `${key}-自动选择`,
        type: 'url-test',
        url: "http://www.gstatic.com/generate_204",
        interval: 600,
        tolerance: 100,
        proxies: nodesInRegion,
        hidden: true,
        lazy: false,
        icon: "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png"
      });
    }
  });

  const allManualRegionGroupNames = manualRegionGroups.map(g => g.name);
  const allAutoRegionGroupNames = autoRegionGroups.map(g => g.name);

  // Emby 专用自动选择组
  const embyAutoGroups = [];

  // 日本 01-04 自动选择（使用通用节点）
  const jpEmbyNodes = generalProxyNames.filter(name => {
    if (!REGIONS.JP.regex.test(name)) return false;
    return /[-\s]?0[1-4](?:\D|$)/.test(name);
  });
  if (jpEmbyNodes.length > 0) {
    embyAutoGroups.push({
      ...groupBaseOption,
      name: "JP(01-04)-自动选择",
      type: 'url-test',
      url: "http://www.gstatic.com/generate_204",
      interval: 600,
      tolerance: 100,
      proxies: jpEmbyNodes,
      hidden: true,
      lazy: false,
      icon: "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png"
    });
  }

  // 台湾 05-08 自动选择（使用通用节点）
  const twEmbyNodes = generalProxyNames.filter(name => {
    if (!REGIONS.TW.regex.test(name)) return false;
    return /[-\s]?0[5-8](?:\D|$)/.test(name);
  });
  if (twEmbyNodes.length > 0) {
    embyAutoGroups.push({
      ...groupBaseOption,
      name: "TW(05-08)-自动选择",
      type: 'url-test',
      url: "http://www.gstatic.com/generate_204",
      interval: 600,
      tolerance: 100,
      proxies: twEmbyNodes,
      hidden: true,
      lazy: false,
      icon: "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png"
    });
  }

  // 新增：Emby 专线自动选择（仅 4 条专线，专用测速地址）
  if (embyExclusiveNodes.length > 0) {
    embyAutoGroups.push({
      ...groupBaseOption,
      name: "Emby专线-自动选择",
      type: 'url-test',
      url: "http://e.beupisp.com/generate_204",
      interval: 600,
      tolerance: 100,
      proxies: embyExclusiveNodes,
      hidden: true,
      lazy: false,
      icon: "https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Color/Auto.png"
    });
  }

  // 动态服务组
  const dynamicServiceGroups = [];
  const dynamicRuleProviders = {};
  const dynamicRules = [];

  for (const serviceKey in ENABLED_SERVICES) {
    const service = ENABLED_SERVICES[serviceKey];
    if (!service.enabled) continue;

    let availableProxies = [];

    // Emby 特殊处理
    if (service.isEmby) {
      if (allAutoRegionGroupNames.includes("HK-自动选择")) {
        availableProxies.push("HK-自动选择");
      }
      availableProxies.push("JP(01-04)-自动选择");
      availableProxies.push("TW(05-08)-自动选择");
      if (allAutoRegionGroupNames.includes("US-自动选择")) {
        availableProxies.push("US-自动选择");
      }
      if (allAutoRegionGroupNames.includes("SG-自动选择")) {
        availableProxies.push("SG-自动选择");
      }
      // 新增：Emby 专线自动选择
      if (embyExclusiveNodes.length > 0) {
        availableProxies.push("Emby专线-自动选择");
      }
    } else {
      // 其他服务的正常逻辑（使用通用节点）
      availableProxies = ["HK-BEUP® ISP"];
      if (service.allowDirect) availableProxies.unshift("DIRECT");

      availableProxies.push("手动选择");

      let hasSpecificRegions = service.regions && service.regions.length > 0;
      if (hasSpecificRegions) {
        service.regions.forEach(key => {
          if (allAutoRegionGroupNames.includes(`${key}-自动选择`)) {
            availableProxies.push(`${key}-自动选择`);
          }
        });
      } else {
        availableProxies.push(...allAutoRegionGroupNames);
      }

      availableProxies.push(...generalProxyNames);
    }

    dynamicServiceGroups.push({
      ...groupBaseOption,
      name: service.groupName,
      type: 'select',
      proxies: [...new Set(availableProxies)],
      icon: service.icon
    });

    dynamicRuleProviders[service.rule.providerKey] = {
      ...ruleProviderCommon,
      behavior: 'classical',
      url: service.rule.url,
      path: `./ruleset/generated/${service.rule.providerKey}.yaml`
    };

    let ruleString = `RULE-SET,${service.rule.providerKey},${service.groupName}`;
    if (service.rule.options) ruleString += `,${service.rule.options}`;
    dynamicRules.push(ruleString);
  }

  // 基础分流组（HK-BEUP® ISP 加入所有自动选择，使用通用节点）
  const nodeSelectionProxies = [
    "手动选择",
    "延迟选优",
    "故障转移",
    ...allAutoRegionGroupNames,
    ...allManualRegionGroupNames
  ];

  if (chainLandingProxies && chainLandingProxies.length > 0) {
    nodeSelectionProxies.splice(3, 0, chainLandingName);
  }

  let baseProxyGroups = [
    { ...groupBaseOption, name: "HK-BEUP® ISP", type: "select", proxies: nodeSelectionProxies, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Proxy.png" },
    { ...groupBaseOption, name: "手动选择", type: "select", proxies: generalProxyNames, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Static.png" },
    { ...groupBaseOption, name: "延迟选优", type: "url-test", tolerance: 100, interval: 600, lazy: false, proxies: generalProxyNames, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Auto.png" },
    { ...groupBaseOption, name: "故障转移", type: "fallback", interval: 600, lazy: false, proxies: generalProxyNames, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Bypass.png" },
    { ...groupBaseOption, name: "广告过滤", type: "select", proxies: ["REJECT", "DIRECT"], icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Advertising.png" },
    { ...groupBaseOption, name: "漏网之鱼", type: "select", proxies: ["HK-BEUP® ISP", "DIRECT", ...allAutoRegionGroupNames, "手动选择"], icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Final.png" },
  ];

  if (chainLandingProxies && chainLandingProxies.length > 0) {
    baseProxyGroups.push(
      { ...groupBaseOption, name: chainLandingName, type: "select", proxies: chainProxiesName, icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Proxy.png" },
      { ...groupBaseOption, name: chainTransitName, type: "select", proxies: generalProxyNames.filter(p => !chainProxiesName.includes(p)), icon: "https://fastly.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Proxy.png" }
    );
  }

  // 合并所有代理组
  config["proxy-groups"] = [
    ...baseProxyGroups,
    ...dynamicServiceGroups,
    ...manualRegionGroups,
    ...autoRegionGroups,
    ...embyAutoGroups
  ];

  // 合并所有规则集
  config["rule-providers"] = {
    ...staticRuleProviders,
    ...dynamicRuleProviders,
    ...lsExtraProviders,
    ...bmRuleProviders
  };

  // blackmatrix7 规则
  const bmRules = [
    "RULE-SET,youtube,HK-BEUP® ISP",
    "RULE-SET,twitter,HK-BEUP® ISP",
    "RULE-SET,tiktok,HK-BEUP® ISP",
    "RULE-SET,discord,HK-BEUP® ISP",
    "RULE-SET,wikipedia,HK-BEUP® ISP",
    "RULE-SET,gitlab,HK-BEUP® ISP",
    "RULE-SET,cloudflare,HK-BEUP® ISP",
    "RULE-SET,paypal,HK-BEUP® ISP",
    "RULE-SET,reddit,HK-BEUP® ISP",
    "RULE-SET,spotify,HK-BEUP® ISP",
    "RULE-SET,steam,HK-BEUP® ISP",
    "RULE-SET,epic,HK-BEUP® ISP",
    "RULE-SET,onedrive,HK-BEUP® ISP",
    "RULE-SET,dropbox,HK-BEUP® ISP"
  ];

  // Loyalsoldier 扩展规则
  const lsRules = [
    "RULE-SET,icloud,DIRECT",
    "RULE-SET,applecn,DIRECT",
    "RULE-SET,googled,Google",
    "RULE-SET,tld_not_cn,HK-BEUP® ISP",
    "RULE-SET,telegramcidr,HK-BEUP® ISP"
  ];

  // 规则装配
  config["rules"] = [
    ...staticRules.top,
    ...dynamicRules,
    ...bmRules,
    ...lsRules,
    ...staticRules.bottom
  ];

  config["dns"] = dnsConfig;
  config["proxies"].forEach(proxy => { proxy.udp = true; });

  return config;
}
